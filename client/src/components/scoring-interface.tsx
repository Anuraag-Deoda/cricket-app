import { useCricketStore } from "@/store/cricket-store";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { apiRequest } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";

export default function ScoringInterface() {
  const { 
    match, 
    addBall, 
    undoLastBall, 
    redoLastBall, 
    changeBowler, 
    changeBatsman,
    addCommentary 
  } = useCricketStore();
  
  const { toast } = useToast();
  const queryClient = useQueryClient();

  const generateCommentaryMutation = useMutation({
    mutationFn: async (ballData: { runs: number; isWicket: boolean }) => {
      const response = await apiRequest('POST', '/api/commentary/generate', ballData);
      return response.json();
    },
    onSuccess: (data) => {
      addCommentary(data.commentary, 'gemini');
    },
    onError: () => {
      toast({
        title: "Commentary Generation Failed",
        description: "Unable to generate AI commentary at this time.",
        variant: "destructive",
      });
    },
  });

  const handleScoringButton = async (runs: number, isExtra = false, isWicket = false) => {
    if (!match.currentBatsmen.striker || !match.currentBowler) {
      toast({
        title: "Missing Players",
        description: "Please select batsmen and bowler before scoring.",
        variant: "destructive",
      });
      return;
    }

    const ballData = {
      overId: '', // Will be generated by backend
      ballNumber: (match.score.balls % 6) + 1,
      batsmanId: match.currentBatsmen.striker.id,
      bowlerId: match.currentBowler.id,
      runs,
      extras: isExtra ? runs : 0,
      extraType: null,
      isWicket,
      wicketType: null,
      dismissedPlayerId: null,
      commentary: null,
    };

    addBall(ballData);
    
    // Generate commentary if auto-generate is enabled
    if (match.currentMatch) {
      generateCommentaryMutation.mutate({ runs, isWicket });
    }
  };

  const currentOver = Math.floor(match.score.balls / 6);
  const ballInOver = match.score.balls % 6;

  return (
    <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
      {/* Left Column: Current Match State */}
      <div className="lg:col-span-2 space-y-6">
        {/* Current Batsmen Card */}
        <Card className="border-l-4 border-cricket-primary">
          <CardHeader>
            <CardTitle className="flex items-center">
              <i className="fas fa-running text-cricket-primary mr-2"></i>
              Current Partnership
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-2 gap-4">
              <div className="flex items-center space-x-3">
                <div className="w-12 h-12 bg-cricket-accent rounded-full flex items-center justify-center">
                  <span className="text-white font-semibold text-sm">
                    {match.currentBatsmen.striker?.name.split(' ').map(n => n[0]).join('') || 'B1'}
                  </span>
                </div>
                <div>
                  <h4 className="font-semibold">{match.currentBatsmen.striker?.name || 'Batsman 1'}</h4>
                  <div className="flex items-center space-x-2 text-sm text-cricket-gray">
                    <span className="font-source-code">25*</span>
                    <span>(18)</span>
                    <span>SR: 138.9</span>
                  </div>
                </div>
                <div className="ml-auto">
                  <div className="w-2 h-2 bg-cricket-primary rounded-full" title="On Strike"></div>
                </div>
              </div>
              <div className="flex items-center space-x-3">
                <div className="w-12 h-12 bg-gray-400 rounded-full flex items-center justify-center">
                  <span className="text-white font-semibold text-sm">
                    {match.currentBatsmen.nonStriker?.name.split(' ').map(n => n[0]).join('') || 'B2'}
                  </span>
                </div>
                <div>
                  <h4 className="font-semibold">{match.currentBatsmen.nonStriker?.name || 'Batsman 2'}</h4>
                  <div className="flex items-center space-x-2 text-sm text-cricket-gray">
                    <span className="font-source-code">12</span>
                    <span>(8)</span>
                    <span>SR: 150.0</span>
                  </div>
                </div>
              </div>
            </div>
            <div className="mt-4 p-3 bg-cricket-bg rounded-lg">
              <div className="flex justify-between text-sm">
                <span>Partnership: <span className="font-semibold">37</span> runs in <span>26</span> balls</span>
                <span>Run Rate: <span className="font-semibold">8.5</span></span>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Scoring Control Panel */}
        <Card>
          <CardHeader>
            <div className="flex items-center justify-between">
              <CardTitle className="flex items-center">
                <i className="fas fa-gamepad text-cricket-primary mr-2"></i>
                Ball-by-Ball Control
              </CardTitle>
              <div className="flex items-center space-x-2">
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={undoLastBall}
                  disabled={match.undoStack.length === 0}
                  title="Undo"
                >
                  <i className="fas fa-undo"></i>
                </Button>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={redoLastBall}
                  disabled={match.redoStack.length === 0}
                  title="Redo"
                >
                  <i className="fas fa-redo"></i>
                </Button>
              </div>
            </div>
          </CardHeader>
          <CardContent>
            {/* Current Over Display */}
            <div className="mb-4 p-3 bg-gray-50 rounded-lg">
              <div className="flex items-center justify-between mb-2">
                <span className="text-sm font-medium">Over {currentOver}.{ballInOver}</span>
                <span className="text-sm text-cricket-gray">
                  Bowler: {match.currentBowler?.name || 'Select Bowler'}
                </span>
              </div>
              <div className="flex space-x-2">
                {match.recentBalls.slice(0, 6).reverse().map((ball, index) => (
                  <div
                    key={ball.id}
                    className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-semibold ${
                      ball.isWicket 
                        ? 'bg-red-500 text-white' 
                        : ball.runs >= 4 
                        ? 'bg-cricket-primary text-white'
                        : ball.runs > 0
                        ? 'bg-cricket-accent text-white'
                        : 'bg-gray-300 text-cricket-dark'
                    }`}
                  >
                    {ball.isWicket ? 'W' : ball.runs}
                  </div>
                ))}
                {ballInOver < 6 && (
                  <div className="w-8 h-8 border-2 border-dashed border-cricket-primary rounded-full flex items-center justify-center text-cricket-primary text-sm">
                    ?
                  </div>
                )}
              </div>
            </div>

            {/* Scoring Buttons */}
            <div className="grid grid-cols-4 gap-3 mb-4">
              <Button
                variant="outline"
                className="py-3 font-semibold"
                onClick={() => handleScoringButton(0)}
              >
                0
              </Button>
              <Button
                className="py-3 font-semibold bg-cricket-accent hover:bg-blue-600"
                onClick={() => handleScoringButton(1)}
              >
                1
              </Button>
              <Button
                className="py-3 font-semibold bg-cricket-accent hover:bg-blue-600"
                onClick={() => handleScoringButton(2)}
              >
                2
              </Button>
              <Button
                className="py-3 font-semibold bg-cricket-accent hover:bg-blue-600"
                onClick={() => handleScoringButton(3)}
              >
                3
              </Button>
              <Button
                className="py-3 font-bold text-lg bg-cricket-primary hover:bg-green-600"
                onClick={() => handleScoringButton(4)}
              >
                <i className="fas fa-square mr-1"></i>4
              </Button>
              <Button
                className="py-3 font-bold text-lg bg-cricket-primary hover:bg-green-600"
                onClick={() => handleScoringButton(6)}
              >
                <i className="fas fa-circle mr-1"></i>6
              </Button>
              <Button
                variant="destructive"
                className="py-3 font-bold"
                onClick={() => handleScoringButton(0, false, true)}
              >
                <i className="fas fa-times mr-1"></i>W
              </Button>
              <Button
                className="py-3 font-semibold bg-orange-400 hover:bg-orange-500"
                onClick={() => handleScoringButton(1, true)}
              >
                +Extra
              </Button>
            </div>

            {/* Quick Actions */}
            <div className="flex justify-between items-center pt-4 border-t">
              <div className="flex space-x-2">
                <Button variant="outline" size="sm">
                  <i className="fas fa-exchange-alt mr-1"></i>Change Strike
                </Button>
                <Button variant="outline" size="sm">
                  <i className="fas fa-user-plus mr-1"></i>New Batsman
                </Button>
              </div>
              <Button className="bg-cricket-accent hover:bg-blue-600" size="sm">
                <i className="fas fa-forward mr-1"></i>End Over
              </Button>
            </div>
          </CardContent>
        </Card>

        {/* Recent Balls */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center">
              <i className="fas fa-history text-cricket-primary mr-2"></i>
              Recent Balls
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-2">
              {match.recentBalls.slice(0, 5).map((ball) => (
                <div key={ball.id} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                  <div className="flex items-center space-x-3">
                    <span className="font-source-code text-sm text-cricket-gray">
                      {Math.floor((match.score.balls - 1) / 6)}.{((match.score.balls - 1) % 6) + 1}
                    </span>
                    <div className={`w-6 h-6 rounded-full flex items-center justify-center text-xs font-semibold ${
                      ball.isWicket 
                        ? 'bg-red-500 text-white' 
                        : ball.runs >= 4 
                        ? 'bg-cricket-primary text-white'
                        : 'bg-cricket-accent text-white'
                    }`}>
                      {ball.isWicket ? 'W' : ball.runs}
                    </div>
                    <span className="text-sm">
                      {ball.isWicket 
                        ? 'Wicket!' 
                        : ball.runs === 6 
                        ? 'SIX!' 
                        : ball.runs === 4 
                        ? 'FOUR!'
                        : `${ball.runs} run${ball.runs !== 1 ? 's' : ''}`
                      }
                    </span>
                  </div>
                  <Button variant="ghost" size="sm" className="text-cricket-gray hover:text-red-500">
                    <i className="fas fa-times text-xs"></i>
                  </Button>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Right Column: Match Summary & Controls */}
      <div className="space-y-6">
        {/* Match Status Card */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center">
              <i className="fas fa-info-circle text-cricket-primary mr-2"></i>
              Match Status
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              <div className="flex justify-between">
                <span className="text-cricket-gray">Target:</span>
                <span className="font-semibold">{match.currentMatch?.target || 'N/A'}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-cricket-gray">Needed:</span>
                <span className="font-semibold text-red-600">
                  {match.currentMatch?.target 
                    ? `${match.currentMatch.target - match.score.runs} from ${(match.currentMatch.oversPerInnings * 6) - match.score.balls} balls`
                    : 'Setting target'
                  }
                </span>
              </div>
              <div className="flex justify-between">
                <span className="text-cricket-gray">Overs Left:</span>
                <span className="font-semibold">
                  {match.currentMatch ? (match.currentMatch.oversPerInnings - Math.floor(match.score.overs)).toFixed(1) : 'N/A'}
                </span>
              </div>
              <div className="flex justify-between">
                <span className="text-cricket-gray">Powerplay:</span>
                <span className="font-semibold text-green-600">
                  {match.score.overs < 6 ? 'Active' : 'Complete'}
                </span>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Current Bowler */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center">
              <i className="fas fa-baseball-ball text-cricket-primary mr-2"></i>
              Current Bowler
            </CardTitle>
          </CardHeader>
          <CardContent>
            {match.currentBowler ? (
              <>
                <div className="flex items-center space-x-3 mb-3">
                  <div className="w-12 h-12 bg-red-500 rounded-full flex items-center justify-center">
                    <span className="text-white font-semibold text-sm">
                      {match.currentBowler.name.split(' ').map(n => n[0]).join('')}
                    </span>
                  </div>
                  <div>
                    <h4 className="font-semibold">{match.currentBowler.name}</h4>
                    <p className="text-sm text-cricket-gray">{match.currentBowler.bowlingStyle || 'Right-arm fast'}</p>
                  </div>
                </div>
                <div className="grid grid-cols-2 gap-3 text-sm">
                  <div>
                    <span className="text-cricket-gray">Overs:</span>
                    <span className="font-semibold ml-1">2.3</span>
                  </div>
                  <div>
                    <span className="text-cricket-gray">Runs:</span>
                    <span className="font-semibold ml-1">18</span>
                  </div>
                  <div>
                    <span className="text-cricket-gray">Wickets:</span>
                    <span className="font-semibold ml-1">1</span>
                  </div>
                  <div>
                    <span className="text-cricket-gray">Economy:</span>
                    <span className="font-semibold ml-1">{(match.currentBowler.economy || 0).toFixed(2)}</span>
                  </div>
                </div>
              </>
            ) : (
              <p className="text-cricket-gray text-center py-4">No bowler selected</p>
            )}
            <Button className="w-full mt-4 bg-cricket-primary hover:bg-green-600">
              <i className="fas fa-sync-alt mr-1"></i>Change Bowler
            </Button>
          </CardContent>
        </Card>

        {/* AI Commentary Preview */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center">
              <i className="fas fa-robot text-cricket-primary mr-2"></i>
              AI Commentary
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="p-4 bg-cricket-bg rounded-lg mb-3">
              <p className="text-sm italic">
                {generateCommentaryMutation.isPending 
                  ? "Generating commentary..." 
                  : match.currentMatch 
                  ? "Score a ball to see AI commentary!"
                  : "Start a match to get live AI commentary"
                }
              </p>
              <div className="flex items-center justify-between mt-2 text-xs text-cricket-gray">
                <span>Powered by Gemini AI</span>
                <span>{Math.floor(match.score.balls / 6)}.{(match.score.balls % 6) + 1}</span>
              </div>
            </div>
            <Button 
              className="w-full bg-cricket-accent hover:bg-blue-600" 
              disabled={generateCommentaryMutation.isPending}
            >
              <i className="fas fa-microphone mr-1"></i>Generate Commentary
            </Button>
          </CardContent>
        </Card>

        {/* Quick Stats */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center">
              <i className="fas fa-tachometer-alt text-cricket-primary mr-2"></i>
              Quick Stats
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-3 text-sm">
              <div className="flex justify-between">
                <span className="text-cricket-gray">Boundaries:</span>
                <span className="font-semibold">
                  {match.ballHistory.filter(b => b.runs === 4).length + match.ballHistory.filter(b => b.runs === 6).length} 
                  (4s: {match.ballHistory.filter(b => b.runs === 4).length}, 6s: {match.ballHistory.filter(b => b.runs === 6).length})
                </span>
              </div>
              <div className="flex justify-between">
                <span className="text-cricket-gray">Extras:</span>
                <span className="font-semibold">
                  {match.ballHistory.reduce((acc, ball) => acc + (ball.extras || 0), 0)}
                </span>
              </div>
              <div className="flex justify-between">
                <span className="text-cricket-gray">Last 5 Overs:</span>
                <span className="font-semibold">
                  {match.ballHistory.slice(-30).reduce((acc, ball) => acc + ball.runs, 0)}/
                  {match.ballHistory.slice(-30).filter(ball => ball.isWicket).length}
                </span>
              </div>
              <div className="flex justify-between">
                <span className="text-cricket-gray">Dot Ball %:</span>
                <span className="font-semibold">
                  {match.ballHistory.length > 0 
                    ? ((match.ballHistory.filter(b => b.runs === 0 && !b.isWicket).length / match.ballHistory.length) * 100).toFixed(0)
                    : 0
                  }%
                </span>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
